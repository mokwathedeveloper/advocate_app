#!/usr/bin/env node

// Enhanced Notification System Setup Script - LegalPro v1.0.1
// This script helps you configure the notification system step by step

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function setupNotifications() {
  console.log('🚀 LegalPro Enhanced Notification System Setup\n');
  console.log('This script will help you configure email and SMS notifications.\n');
  
  const config = {};
  
  // Email Configuration
  console.log('📧 EMAIL CONFIGURATION\n');
  
  const emailProvider = await question('Choose email provider (1=Gmail, 2=SendGrid, 3=AWS SES): ');
  
  switch (emailProvider) {
    case '1':
      console.log('\n📧 Gmail Configuration');
      console.log('Note: You need to enable 2FA and generate an app password');
      config.SMTP_HOST = 'smtp.gmail.com';
      config.SMTP_PORT = '587';
      config.SMTP_SECURE = 'false';
      config.SMTP_USER = await question('Gmail address: ');
      config.SMTP_PASS = await question('App password (16 characters): ');
      break;
      
    case '2':
      console.log('\n📧 SendGrid Configuration');
      config.SMTP_HOST = 'smtp.sendgrid.net';
      config.SMTP_PORT = '587';
      config.SMTP_SECURE = 'false';
      config.SMTP_USER = 'apikey';
      config.SMTP_PASS = await question('SendGrid API key: ');
      break;
      
    case '3':
      console.log('\n📧 AWS SES Configuration');
      config.SMTP_HOST = await question('AWS SES SMTP endpoint (e.g., email-smtp.us-east-1.amazonaws.com): ');
      config.SMTP_PORT = '587';
      config.SMTP_SECURE = 'false';
      config.SMTP_USER = await question('AWS SMTP username: ');
      config.SMTP_PASS = await question('AWS SMTP password: ');
      break;
      
    default:
      console.log('Invalid choice. Using Gmail defaults.');
      config.SMTP_HOST = 'smtp.gmail.com';
      config.SMTP_PORT = '587';
      config.SMTP_SECURE = 'false';
  }
  
  config.SMTP_FROM_EMAIL = await question('From email address (e.g., noreply@legalpro.co.ke): ');
  
  // SMS Configuration
  console.log('\n📱 SMS CONFIGURATION\n');
  
  const smsProvider = await question('Choose SMS provider (1=Twilio, 2=Africa\'s Talking, 3=Skip): ');
  
  switch (smsProvider) {
    case '1':
      console.log('\n📱 Twilio Configuration');
      config.TWILIO_ACCOUNT_SID = await question('Twilio Account SID: ');
      config.TWILIO_AUTH_TOKEN = await question('Twilio Auth Token: ');
      config.TWILIO_PHONE_NUMBER = await question('Twilio Phone Number (with +): ');
      break;
      
    case '2':
      console.log('\n📱 Africa\'s Talking Configuration');
      config.AT_API_KEY = await question('Africa\'s Talking API Key: ');
      config.AT_USERNAME = await question('Africa\'s Talking Username: ');
      config.SMS_PROVIDER = 'africastalking';
      break;
      
    case '3':
      console.log('Skipping SMS configuration.');
      break;
      
    default:
      console.log('Invalid choice. Skipping SMS configuration.');
  }
  
  // WhatsApp Configuration
  console.log('\n💬 WHATSAPP CONFIGURATION\n');
  
  const whatsappSetup = await question('Do you want to configure WhatsApp Business API? (y/n): ');
  
  if (whatsappSetup.toLowerCase() === 'y') {
    config.WHATSAPP_BUSINESS_TOKEN = await question('WhatsApp Business Token: ');
    config.WHATSAPP_PHONE_NUMBER_ID = await question('WhatsApp Phone Number ID: ');
    config.WHATSAPP_VERIFY_TOKEN = await question('WhatsApp Verify Token: ');
    config.WHATSAPP_NOTIFICATIONS_ENABLED = 'true';
  } else {
    config.WHATSAPP_NOTIFICATIONS_ENABLED = 'false';
  }
  
  // Application URLs
  console.log('\n🌐 APPLICATION CONFIGURATION\n');
  
  config.FRONTEND_URL = await question('Frontend URL (e.g., https://legalpro.co.ke): ') || 'http://localhost:5173';
  config.BACKEND_URL = await question('Backend URL (e.g., https://api.legalpro.co.ke): ') || 'http://localhost:5000';
  
  // Notification Settings
  console.log('\n⚙️ NOTIFICATION SETTINGS\n');
  
  config.EMAIL_NOTIFICATIONS_ENABLED = 'true';
  config.SMS_NOTIFICATIONS_ENABLED = smsProvider !== '3' ? 'true' : 'false';
  
  // Default settings
  config.EMAIL_RETRY_ATTEMPTS = '3';
  config.SMS_RETRY_ATTEMPTS = '3';
  config.EMAIL_RETRY_DELAY = '5000';
  config.SMS_RETRY_DELAY = '3000';
  config.QUIET_HOURS_ENABLED = 'true';
  config.QUIET_HOURS_START = '22:00';
  config.QUIET_HOURS_END = '07:00';
  config.TIMEZONE = 'Africa/Nairobi';
  
  // Generate .env content
  let envContent = '# Enhanced Notification System Configuration\n';
  envContent += '# Generated by setup script\n\n';
  
  envContent += '# Email Configuration\n';
  envContent += `SMTP_HOST=${config.SMTP_HOST}\n`;
  envContent += `SMTP_PORT=${config.SMTP_PORT}\n`;
  envContent += `SMTP_SECURE=${config.SMTP_SECURE}\n`;
  envContent += `SMTP_USER=${config.SMTP_USER}\n`;
  envContent += `SMTP_PASS=${config.SMTP_PASS}\n`;
  envContent += `SMTP_FROM_EMAIL=${config.SMTP_FROM_EMAIL}\n\n`;
  
  if (config.TWILIO_ACCOUNT_SID) {
    envContent += '# SMS Configuration (Twilio)\n';
    envContent += `TWILIO_ACCOUNT_SID=${config.TWILIO_ACCOUNT_SID}\n`;
    envContent += `TWILIO_AUTH_TOKEN=${config.TWILIO_AUTH_TOKEN}\n`;
    envContent += `TWILIO_PHONE_NUMBER=${config.TWILIO_PHONE_NUMBER}\n\n`;
  }
  
  if (config.AT_API_KEY) {
    envContent += '# SMS Configuration (Africa\'s Talking)\n';
    envContent += `AT_API_KEY=${config.AT_API_KEY}\n`;
    envContent += `AT_USERNAME=${config.AT_USERNAME}\n`;
    envContent += `SMS_PROVIDER=${config.SMS_PROVIDER}\n\n`;
  }
  
  if (config.WHATSAPP_BUSINESS_TOKEN) {
    envContent += '# WhatsApp Configuration\n';
    envContent += `WHATSAPP_BUSINESS_TOKEN=${config.WHATSAPP_BUSINESS_TOKEN}\n`;
    envContent += `WHATSAPP_PHONE_NUMBER_ID=${config.WHATSAPP_PHONE_NUMBER_ID}\n`;
    envContent += `WHATSAPP_VERIFY_TOKEN=${config.WHATSAPP_VERIFY_TOKEN}\n\n`;
  }
  
  envContent += '# Application URLs\n';
  envContent += `FRONTEND_URL=${config.FRONTEND_URL}\n`;
  envContent += `BACKEND_URL=${config.BACKEND_URL}\n\n`;
  
  envContent += '# Notification Control\n';
  envContent += `EMAIL_NOTIFICATIONS_ENABLED=${config.EMAIL_NOTIFICATIONS_ENABLED}\n`;
  envContent += `SMS_NOTIFICATIONS_ENABLED=${config.SMS_NOTIFICATIONS_ENABLED}\n`;
  envContent += `WHATSAPP_NOTIFICATIONS_ENABLED=${config.WHATSAPP_NOTIFICATIONS_ENABLED}\n\n`;
  
  envContent += '# Retry Configuration\n';
  envContent += `EMAIL_RETRY_ATTEMPTS=${config.EMAIL_RETRY_ATTEMPTS}\n`;
  envContent += `SMS_RETRY_ATTEMPTS=${config.SMS_RETRY_ATTEMPTS}\n`;
  envContent += `EMAIL_RETRY_DELAY=${config.EMAIL_RETRY_DELAY}\n`;
  envContent += `SMS_RETRY_DELAY=${config.SMS_RETRY_DELAY}\n\n`;
  
  envContent += '# Quiet Hours (Kenya Time)\n';
  envContent += `QUIET_HOURS_ENABLED=${config.QUIET_HOURS_ENABLED}\n`;
  envContent += `QUIET_HOURS_START=${config.QUIET_HOURS_START}\n`;
  envContent += `QUIET_HOURS_END=${config.QUIET_HOURS_END}\n`;
  envContent += `TIMEZONE=${config.TIMEZONE}\n\n`;
  
  envContent += '# Event-Specific Configuration\n';
  envContent += 'WELCOME_EMAIL_ENABLED=true\n';
  envContent += 'WELCOME_SMS_ENABLED=true\n';
  envContent += 'APPOINTMENT_CONFIRMATION_EMAIL_ENABLED=true\n';
  envContent += 'APPOINTMENT_CONFIRMATION_SMS_ENABLED=true\n';
  envContent += 'CASE_UPDATE_EMAIL_ENABLED=true\n';
  envContent += 'CASE_UPDATE_SMS_ENABLED=true\n';
  envContent += 'PAYMENT_CONFIRMATION_EMAIL_ENABLED=true\n';
  envContent += 'PAYMENT_CONFIRMATION_SMS_ENABLED=true\n';
  
  // Save configuration
  const envPath = path.join(process.cwd(), '.env');
  const backupPath = path.join(process.cwd(), '.env.backup');
  
  // Backup existing .env if it exists
  if (fs.existsSync(envPath)) {
    fs.copyFileSync(envPath, backupPath);
    console.log('\n📋 Existing .env backed up to .env.backup');
  }
  
  // Write new configuration
  fs.writeFileSync(envPath, envContent);
  
  console.log('\n✅ Configuration saved to .env file!');
  console.log('\n🧪 TESTING YOUR CONFIGURATION\n');
  
  const testEmail = await question('Enter your email for testing (or press Enter to skip): ');
  const testPhone = await question('Enter your phone number for testing (or press Enter to skip): ');
  
  if (testEmail || testPhone) {
    console.log('\nGenerating test script...');
    
    const testScript = `
// Test script generated by setup
const { sendNotification } = require('./utils/notificationService');

async function testConfiguration() {
  const testUser = {
    _id: 'test-user-id',
    firstName: 'Test',
    lastName: 'User',
    email: '${testEmail}',
    phone: '${testPhone}',
    userType: 'client'
  };

  console.log('🧪 Testing notification configuration...');
  
  try {
    const result = await sendNotification(testUser, 'welcome', {
      registrationDate: new Date().toLocaleDateString('en-KE'),
      dashboardUrl: '${config.FRONTEND_URL}/dashboard'
    });
    
    console.log('✅ Test completed:', JSON.stringify(result, null, 2));
  } catch (error) {
    console.error('❌ Test failed:', error.message);
  }
}

testConfiguration();
`;
    
    fs.writeFileSync(path.join(process.cwd(), 'test-notifications.js'), testScript);
    console.log('✅ Test script saved as test-notifications.js');
    console.log('\nTo test your configuration, run:');
    console.log('node test-notifications.js');
  }
  
  console.log('\n🎉 SETUP COMPLETE!\n');
  console.log('Next steps:');
  console.log('1. Review the generated .env file');
  console.log('2. Test your configuration with the test script');
  console.log('3. Check the documentation in docs/CONFIGURATION_GUIDE.md');
  console.log('4. Start your application and test notifications');
  
  rl.close();
}

// Handle errors
process.on('SIGINT', () => {
  console.log('\n\n❌ Setup cancelled by user');
  rl.close();
  process.exit(0);
});

// Run setup
setupNotifications().catch((error) => {
  console.error('❌ Setup failed:', error.message);
  rl.close();
  process.exit(1);
});
